[[{"l":"Welcome to PocketPy","p":["PocketPy is a lightweight Python interpreter for game engines."]}],[{"i":"cc","l":"C/C++","p":["For C/C++ developers, it is possible to generate a single header file pocketpy.h by running the following command on Linux/WSL.","g++ is required.","For references, see C-API."]}],[{"l":"Flutter"},{"l":"Introduction","p":["This plugin provides object-oriented interfaces including full functionality of PocketPy C-API. It also provides JsonRpcServer class and os module bindings.","Run the following script to install this plugin."]},{"l":"Requirements"},{"l":"For Android","p":["You may need to set the Android NDK version to \"21.4.7075529\" or higher in android/app/build.gradle."]},{"l":"For iOS","p":["It should work without any setup."]},{"l":"For Web","p":["Download an artifact from https://github.com/blueloveTH/pocketpy/releases/latest.","Unzip it and copy web/lib into your root folder where index.html locates.","Then open index.html and add this line before flutter.js tag."]},{"l":"For Windows","p":["VS2017 or higher is required to build the windows .dll. Make sure you have C++ component installed."]},{"l":"Basic Example"},{"l":"REPL Widget Example"}],[{"l":"Godot Engine"},{"l":"Introduction","p":["PocketPy for Godot is integrated via GDExtension.","GDExtension is a Godot 4.0 feature. Godot 3.x won't work.","Please see https://github.com/blueloveTH/godot-cpp/tree/master/pocketpy for details."]},{"l":"Example"}],[{"l":"Unity Engine"},{"l":"Introduction","p":["PocketPy for Unity can be installed via Unity Asset Store.","https://assetstore.unity.com/packages/slug/241120"]},{"l":"Example"}],[{"l":"Basic Features","p":["(1, 2, 'a')","[1, 2, 'a']","[i for i in range(5)]","{'a': 1, 'b': 2}","a, *b = [1, 2, 3]","a, b = 1, 2","a[1:2], a[:2], a[1:]","assert/raise","Catch Exception","class A(B):","Context Block","def f(**kwargs):","def f(x,*args,y=1):","Dict","Eval","eval()","Example","F-String","f'value is {x}'","for/while/break/continue","Function","Function **","If Else","if..else..elif","Import","import/from..import","List","ListComp","Loop","Name","NO","Slice","Star Unpacking","Subclass","Supported","The following table shows the basic features of PocketPy with respect to CPython. The features marked with YES are supported, and the features marked with NO are not supported.","Throw Exception","try..catch","Tuple","Unpacking","with expr as id:","YES"]}],[{"i":"gotolabel","l":"goto/label","p":["PocketPy supports goto and label just like C. You are allowed to change the control flow unconditionally."]},{"l":"Syntax","p":["Labels are named a dot . and an identifier."]},{"l":"Example","p":["If we detect an illegal divert, you will get an UnexpectedError or the behaviour is undefined."]}],[{"l":"ternary op","p":["Ternary operator is a short hand if...else. PocketPy supports C style ternary."]},{"l":"Syntax"},{"l":"Example","p":["Python style ternary is not supported yet in PocketPy."]}],[{"i":"hostpy","l":"Host➡️Py","p":["Call Python function from host language is easy. eval() is the most powerful way to interact with Python. You can access any Python object by using eval(), such as getting a variable, calling a function, etc.","For simple cases, you can also try get_global(), it reads a global variable and returns a json representation of it."]},{"i":"string-vmget_globalstring","l":"String? VM.get_global(String)","p":["Get a global variable of a virtual machine.","Return a json representing the result. If the variable is not found, return null."]},{"i":"string-vmevalstring","l":"String? VM.eval(String)","p":["Evaluate an expression.","Return a json representing the result. If there is any error, return null.","Though eval() is powerful, it may be unsafe in threaded virtual machine. If you encounter a crash, please report it."]}],[{"i":"pyhost","l":"Py➡️Host","p":["Calling host language function from PocketPy is available for threaded virtual machine. This process is achieved by JSONRPC. It can be either synchronous or asynchronous."]},{"l":"Send JSONRPC request","p":["You can use the builtin function jsonrpc."]},{"i":"jsonrpcmethod-params-rawfalse","l":"jsonrpc(method, params, raw=False)","p":["Send a JSONRPC request to host language.","method: the method name","params: the parameters, should be a list","raw: by default it is False, you will get an expected Python object. If there is any error, an exception will be raised. If you set raw=True, you will get a dict object representing the JSONRPC response."]},{"l":"Example","p":["It will generate a JSONRPC request like this:","The response will be like this:"]},{"l":"Handle JSONRPC request","p":["You can use JsonRpcServer to register JSONRPC handlers."]},{"i":"jsonrpcserverregisterstring-name-function-f","l":"JsonRpcServer.register(String name, Function f)","p":["Register a JSONRPC handler."]},{"i":"futurevoid-jsonrpcserverattachthreadedvm-vm","l":"Futurevoid JsonRpcServer.attach(ThreadedVM vm)","p":["Attach the JsonRpcServer into a ThreadedVM. Once the ThreadedVM encounters JSONRPC request, it takes care of it automatically. This process will be stopped when the whole execution is done.","JSONRPC is expensive. It is not recommended to use it in a loop or frame-based logic."]}],[{"l":"json"},{"i":"jsonloadss","l":"json.loads(s)","p":["Decode a JSON string into a PocketPy object.","It is supported by the eval() function."]},{"i":"jsondumpsobj","l":"json.dumps(obj)","p":["Encode a PocketPy object into a JSON string.","It is supported by the compiler with JSON_MODE enabled.","There is a special method __json__() for PocketPy object. If it is defined, it will be called when json.dumps() is called."]}],[{"l":"math"},{"i":"mathe","l":"math.e","p":["2.718281828459045"]},{"i":"mathpi","l":"math.pi","p":["3.141592653589793"]},{"i":"mathisclosea-b","l":"math.isclose(a, b)","p":["Return True if the values of a and b are close to each other, and False otherwise."]},{"i":"mathlogx","l":"math.log(x)","p":["Return the natural logarithm of x."]},{"i":"mathlog10x","l":"math.log10(x)","p":["Return the base-10 logarithm of x."]},{"i":"mathlog2x","l":"math.log2(x)","p":["Return the base-2 logarithm of x."]},{"i":"mathsinx","l":"math.sin(x)","p":["Return the sine of x."]},{"i":"mathcosx","l":"math.cos(x)","p":["Return the cosine of x."]},{"i":"mathtanx","l":"math.tan(x)","p":["Return the tangent of x."]},{"i":"mathisnanx","l":"math.isnan(x)","p":["Return True if x is a NaN (not a number), and False otherwise."]},{"i":"mathisinfx","l":"math.isinf(x)","p":["Return True if x is positive or negative infinity, and False otherwise."]}],[{"l":"os","p":["The os module is just a bunch of JSONRPC wrappers. Their implementations depend on the host language."]},{"i":"oslistdirpath","l":"os.listdir(path)","p":["List all files and directories in a directory."]},{"i":"osmkdirpath","l":"os.mkdir(path)","p":["Create a directory."]},{"i":"osrmdirpath","l":"os.rmdir(path)","p":["Remove a directory."]},{"i":"osremovepath","l":"os.remove(path)","p":["Remove a file."]},{"i":"ospathexistspath","l":"os.path.exists(path)","p":["Check if a file or directory exists."]}],[{"l":"random"},{"i":"randomseeda","l":"random.seed(a)","p":["Set the random seed."]},{"i":"randomrandom","l":"random.random()","p":["Return a random float number in the range [0.0, 1.0)."]},{"i":"randomrandinta-b","l":"random.randint(a, b)","p":["Return a random integer in the range [a, b]."]},{"i":"randomuniforma-b","l":"random.uniform(a, b)","p":["Return a random float number in the range [a, b)."]},{"i":"randomchoiceseq","l":"random.choice(seq)","p":["Return a random element from a sequence."]},{"i":"randomshuffleseq","l":"random.shuffle(seq)","p":["Shuffle a sequence inplace."]}],[{"l":"sys"},{"i":"sysversion","l":"sys.version","p":["The version of PocketPy."]},{"i":"sysgetrefcountobject","l":"sys.getrefcount(object)","p":["Return the reference count of an object. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount()."]},{"i":"sysgetrecursionlimit","l":"sys.getrecursionlimit()","p":["Return the current value of the recursion limit, the maximum depth of the Python interpreter stack. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. The highest possible limit is platform-dependent."]},{"i":"syssetrecursionlimitlimit","l":"sys.setrecursionlimit(limit)","p":["Set the maximum depth of the Python interpreter stack to limit. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. The highest possible limit is platform-dependent."]}],[{"l":"time"},{"i":"timetime","l":"time.time()","p":["Returns the current time in seconds since the epoch as a floating point number."]},{"i":"timesleepseconds","l":"time.sleep(seconds)","p":["Suspends execution for the given number of seconds. The argument may be a floating point number for subsecond precision."]}],[{"l":"VM"},{"i":"vm-pkpy_new_vmbool-use_stdio","l":"VM* pkpy_new_vm(bool use_stdio)","p":["Create a virtual machine."]},{"i":"void-pkpy_vm_add_modulevm-vm-const-char-name-const-char-source","l":"void pkpy_vm_add_module(VM* vm, const char* name, const char* source)","p":["Add a source module into a virtual machine."]},{"i":"char-pkpy_vm_evalvm-vm-const-char-source","l":"char* pkpy_vm_eval(VM* vm, const char* source)","p":["Evaluate an expression.","Return a json representing the result. If there is any error, return nullptr."]},{"i":"void-pkpy_vm_execvm-vm-const-char-source","l":"void pkpy_vm_exec(VM* vm, const char* source)","p":["Run a given source on a virtual machine."]},{"i":"char-pkpy_vm_get_globalvm-vm-const-char-name","l":"char* pkpy_vm_get_global(VM* vm, const char* name)","p":["Get a global variable of a virtual machine.","Return a json representing the result. If the variable is not found, return nullptr."]},{"i":"char-pkpy_vm_read_outputvm-vm","l":"char* pkpy_vm_read_output(VM* vm)","p":["Read the standard output and standard error as string of a virtual machine. The vm-use_stdio should be false. After this operation, both stream will be cleared.","Return a json representing the result."]}],[{"l":"ThreadedVM"},{"i":"threadedvm-pkpy_new_tvmbool-use_stdio","l":"ThreadedVM* pkpy_new_tvm(bool use_stdio)","p":["Create a virtual machine that supports asynchronous execution."]},{"i":"void-pkpy_tvm_exec_asyncvm-vm-const-char-source","l":"void pkpy_tvm_exec_async(VM* vm, const char* source)","p":["Run a given source on a threaded virtual machine. The excution will be started in a new thread."]},{"i":"int-pkpy_tvm_get_statethreadedvm-vm","l":"int pkpy_tvm_get_state(ThreadedVM* vm)","p":["Get the current state of a threaded virtual machine.","Return 0 for THREAD_READY, 1 for THREAD_RUNNING, 2 for THREAD_SUSPENDED, 3 for THREAD_FINISHED."]},{"i":"char-pkpy_tvm_read_jsonrpc_requestthreadedvm-vm","l":"char* pkpy_tvm_read_jsonrpc_request(ThreadedVM* vm)","p":["Read the current JSONRPC request from shared string buffer."]},{"i":"void-pkpy_tvm_reset_statethreadedvm-vm","l":"void pkpy_tvm_reset_state(ThreadedVM* vm)","p":["Set the state of a threaded virtual machine to THREAD_READY. The current state should be THREAD_FINISHED."]},{"i":"void-pkpy_tvm_terminatethreadedvm-vm","l":"void pkpy_tvm_terminate(ThreadedVM* vm)","p":["Emit a KeyboardInterrupt signal to stop a running threaded virtual machine."]},{"i":"void-pkpy_tvm_write_jsonrpc_responsethreadedvm-vm-const-char-value","l":"void pkpy_tvm_write_jsonrpc_response(ThreadedVM* vm, const char* value)","p":["Write a JSONRPC response to shared string buffer."]}],[{"l":"REPL"},{"i":"repl-pkpy_new_replvm-vm","l":"REPL* pkpy_new_repl(VM* vm)","p":["Create a REPL, using the given virtual machine as the backend."]},{"i":"void-pkpy_repl_inputrepl-r-const-char-line","l":"void pkpy_repl_input(REPL* r, const char* line)","p":["Input a source line to an interactive console."]},{"i":"int-pkpy_repl_last_input_resultrepl-r","l":"int pkpy_repl_last_input_result(REPL* r)","p":["Check if the REPL needs more lines."]}],[{"l":"General"},{"i":"void-pkpy_deletevoid-p","l":"void pkpy_delete(void* p)","p":["Delete a pointer allocated by pkpy_xxx_xxx. It can be VM*, REPL*, ThreadedVM*, char*, etc.","If the pointer is not allocated by pkpy_xxx_xxx, the behavior is undefined. For char*, you can also use trivial delete in your language."]}],[{"l":"Performance","p":["The speed of PocketPy is approximately 50% of CPython."]}]]